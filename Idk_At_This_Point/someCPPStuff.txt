// Example program
#include <iostream>
#include <string>

// Memory
uint8_t memory[129600];
int insP = 0;

int a0, a1;

//Instruction functions

void ft01() { memory[a1] = memory[a0]; }
/*void ft01(uint8_t* memory, int a0, int a1) { memory[a1] = memory[a0]; }
void ft02(uint8_t* memory, int a0, int n1) { memory[a0] = n1; }
void ft03(uint8_t* memory, int a0, int a1) { memory[a1] += memory[a0]; }
void ft04(uint8_t* memory, int a0, int a1) { memory[a1] -= memory[a0]; }
void ft05(uint8_t* memory, int a0, int a1) { memory[a1] *= memory[a0]; }
void ft06(uint8_t* memory, int a0, int a1) { memory[a1] /= memory[a0]; }
void ft07(uint8_t* memory, int a0, int a1) { memory[a0] = memory[a0] << a1; }
void ft08(uint8_t* memory, int a0, int a1) { memory[a0] = memory[a0] >> a1; }
void ft09(uint8_t* memory, int a0, int __) { insP = a0; }
void ft10(uint8_t* memory, int a0, int a1) { if (a1 == 0) { insP = a0; } }
void ft11(uint8_t* memory, int a0, int a1) { if (a1 != 0) { insP = a0; } }
*/
void (*instructions[1])() = {ft01};


// Join Bits
int joinBits(uint8_t* memory, int start, int end) {
  int calc = 0;
  for (int i = start; i < end; i++) {
    calc = calc << 8;
    calc = calc | memory[i];
  }
  return calc;
  //return ls.reduce((total, arg, idx) => total + (arg << ((ls.length - 1 - idx) * 8)), 0);
}

int main() {
    
  // Put program in memory
  uint8_t program[3] = {0x15, 0x03, 0x04};
  for (int a = 0; a < 3; a++) {
    memory[a] = program[a];
  }

  // RUN PROGRAM!

  // Get arguments (from the size inside the instruction)
  a0 = insP + ((memory[insP] & 12) >> 2) + 1;
  a1 = joinBits(memory, insP + a0, a0 + (memory[insP] & 3));
  a0 = joinBits(memory, insP + 1, a0);
  
  // Get 4-bit instruction
  (instructions[ ((memory[insP] & 0xF0) >> 4) ])();
  
  for (int a = 0; a < 12; a++) {
      
  }
}
