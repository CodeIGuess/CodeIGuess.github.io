var currCode = `# This is a comment!
7 : a
5:b
print("Hello world!")
print(10)
print( 20 )`;

function log(...a) {
  console.log(...a);
}
function returnError(e) {
  console.log("ERROR! " + e);
}

var error = {
  undefinedString: "'%v1' is not defined."
};

var lexerCode = [
  {startChar: '"', prevType: "", type: "string" , endChar: '"' , newType: ""},
  {startChar: '#', prevType: "", type: "comment", endChar: '\n', newType: ""}
];

var instructions = {
  plus:     {type: "arithmetic"  , val: "plus"    },
  minus:    {type: "arithmetic"  , val: "minus"   },
  multiply: {type: "arithmetic"  , val: "multiply"},
  divide:   {type: "arithmetic"  , val: "divide"  },
  lParen:   {type: "segmentation", val: "lParen"  },
  rParen:   {type: "segmentation", val: "rParen"  }
};

var _letters = "qwertyuiopasdfghjklzxcvbnm_";
var _numbers = "1234567890";
var _special = "+-*/.";

function charType(c) {
  c = c.toLowerCase();
  if        (_letters.indexOf(c) != -1) {
    return "letter";
  } else if (_numbers.indexOf(c) != -1) {
    return "number";
  } else if (_special.indexOf(c) != -1) {
    return "special";
  } else if (c == '\n') {
    return "newline";
  }
  return "none";
}

var tokens = [];

var lastType = "";
var storePos = 0;

// FV (Function / Variable)
var fvPos = 0;
var fvType = "";

for (var cc = 0; cc < currCode.length; cc ++) {
  var chr = currCode[cc];
  var currCharType = charType(chr);
  var didSomething = false;
  for (var i = 0; i < lexerCode.length; i++) {
    if        (lexerCode[i].startChar.indexOf(chr) != -1 && lexerCode[i].prevType == lastType) {
      lastType = lexerCode[i].type;
      storePos = cc;
      didSomething = true;
      break;
    } else if (lexerCode[i].endChar.indexOf(chr)   != -1 && lastType == lexerCode[i].type) {
      tokens.push({type: lastType, val:currCode.substring(storePos + 1, cc)});
      lastType = lexerCode[i].newType;
      didSomething = true;
      break;
    }
  }
  //console.log(chr, currCharType, didSomething);
  if (didSomething || lastType != "") {
    /*if ( != 0) {
      returnError(error.undefinedString);
    }*/
    fvPos = cc;
    continue;
  }
  
  if        (chr == "+") {
    tokens.push(instructions.plus);
  } else if (chr == "-") {
    tokens.push(instructions.minus);
  } else if (chr == "*") {
    tokens.push(instructions.multiply);
  } else if (chr == "/") {
    tokens.push(instructions.divide);
  } else if (chr == "(") {
    tokens.push(instructions.lParen);
  } else if (chr == ")") {
    tokens.push(instructions.rParen);
  } else {
    
    if (fvType != currCharType) {
      console.log(currCode.substring(fvPos, cc));
      fvType = currCharType;
      fvPos = cc;
    }
    
  }
}
